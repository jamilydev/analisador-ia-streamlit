# app.py

import streamlit as st
import pandas as pd
import google.generativeai as genai
import sys
from io import StringIO

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(page_title="Analisador de Planilhas com IA", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ Analisador de Planilhas com IA")
st.caption(f"Hoje √© {pd.Timestamp.now(tz='America/Sao_Paulo').strftime('%A, %d de %B de %Y')}")

# --- Configura√ß√£o da API Key e do Modelo ---
# Para DEPLOY: A chave ser√° lida dos Segredos do Streamlit (st.secrets)
# Para rodar LOCALMENTE: Descomente a linha abaixo e cole sua chave
# GOOGLE_API_KEY = "SUA_CHAVE_API_AQUI" 

try:
    # Tenta obter a chave do ambiente de deploy do Streamlit
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except FileNotFoundError:
    # Se n√£o encontrar, assume que estamos rodando localmente
    st.warning("Chave de API n√£o encontrada nos Segredos. Verifique sua configura√ß√£o local.")
    # Se voc√™ definiu a chave manualmente acima, o c√≥digo continuar√°.

if 'GOOGLE_API_KEY' in locals() or 'GOOGLE_API_KEY' in st.secrets:
    genai.configure(api_key=st.secrets.get("GOOGLE_API_KEY", locals().get("GOOGLE_API_KEY")))
    model = genai.GenerativeModel('gemini-1.5-flash')


# --- Inicializa√ß√£o do Estado da Sess√£o (A "MEM√ìRIA" DO APP) ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "df" not in st.session_state:
    st.session_state.df = None
if "chat" not in st.session_state:
    # Inicia o chat com o modelo se a chave API estiver dispon√≠vel
    if 'GOOGLE_API_KEY' in locals() or 'GOOGLE_API_KEY' in st.secrets:
        st.session_state.chat = model.start_chat(history=[])
    else:
        st.session_state.chat = None

# --- Barra Lateral (Sidebar) para Upload ---
with st.sidebar:
    st.header("1. Carregue seus Dados")
    uploaded_file = st.file_uploader("Selecione sua planilha (.xlsx ou .csv)", type=["xlsx", "csv"])
    
    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.xlsx'):
                st.session_state.df = pd.read_excel(uploaded_file)
            else:
                st.session_state.df = pd.read_csv(uploaded_file)
            
            st.success("Arquivo carregado!")
            st.dataframe(st.session_state.df.head(), height=220)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo: {e}")
            st.session_state.df = None


# --- Interface Principal do Chat ---
if st.session_state.df is not None:
    st.header("2. Converse com seus Dados")

    # Mostra o hist√≥rico da conversa
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Captura a nova pergunta do usu√°rio
    if prompt := st.chat_input("Qual sua pergunta sobre a planilha?"):
        # Adiciona a pergunta do usu√°rio ao hist√≥rico e exibe na tela
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Prepara a resposta do assistente
        with st.chat_message("assistant"):
            with st.spinner("Analisando e pensando..."):
                # Prepara um prompt mais completo para a IA, dando o contexto
                full_prompt = f"""
                Contexto: Voc√™ √© um assistente de an√°lise de dados. O usu√°rio carregou uma planilha.
                As colunas s√£o: {', '.join(st.session_state.df.columns)}.
                O DataFrame completo est√° dispon√≠vel para voc√™ como `df`.

                Pergunta do usu√°rio: "{prompt}"

                Sua tarefa √© responder √† pergunta do usu√°rio. Se a pergunta exigir uma opera√ß√£o com os dados (soma, m√©dia, filtro, etc.),
                mentalmente gere o c√≥digo pandas para encontrar a resposta e ent√£o me diga o resultado em linguagem natural e amig√°vel.
                """
                
                # Envia a pergunta para o chat e obt√©m a resposta
                if st.session_state.chat:
                    response = st.session_state.chat.send_message(full_prompt)
                    response_text = response.text
                else:
                    response_text = "ERRO: A sess√£o de chat n√£o foi inicializada. Verifique a API Key."

                st.markdown(response_text)
        
        # Adiciona a resposta do assistente ao hist√≥rico
        st.session_state.messages.append({"role": "assistant", "content": response_text})
else:
    st.info("Por favor, carregue uma planilha na barra lateral para come√ßar a an√°lise.")